/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.egg.paint;

import static android.view.MotionEvent.ACTION_CANCEL;
import static android.view.MotionEvent.ACTION_DOWN;
import static android.view.MotionEvent.ACTION_MOVE;
import static android.view.MotionEvent.ACTION_UP;

import android.app.Activity;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.OvershootInterpolator;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.Magnifier;

import com.android.egg.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.IntStream;

public class PaintActivity extends Activity {
    private static final float MAX_BRUSH_WIDTH_DP = 100f;
    private static final float MIN_BRUSH_WIDTH_DP = 1f;

    private static final int NUM_BRUSHES = 6;
    private static final int NUM_COLORS = 6;

    private Painting painting = null;
    private CutoutAvoidingToolbar toolbar = null;
    private LinearLayout brushes = null;
    private LinearLayout colors = null;
    private Magnifier magnifier = null;
    private boolean sampling = false;

    private View.OnClickListener buttonHandler = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.btnBrush:
                    view.setSelected(true);
                    hideToolbar(colors);
                    toggleToolbar(brushes);
                    break;
                case R.id.btnColor:
                    view.setSelected(true);
                    hideToolbar(brushes);
                    toggleToolbar(colors);
                    break;
                case R.id.btnClear:
                    painting.clear();
                    break;
                case R.id.btnSample:
                    sampling = true;
                    view.setSelected(true);
                    break;
                case R.id.btnZen:
                    painting.setZenMode(!painting.getZenMode());
                    view.animate()
                            .setStartDelay(200)
                            .setInterpolator(new OvershootInterpolator())
                            .rotation(painting.getZenMode() ? 0f : 90f);
                    break;
            }
        }
    };

    private void showToolbar(View bar) {
        if (bar.getVisibility() != View.GONE) return;
        bar.setVisibility(View.VISIBLE);
        bar.setTranslationY(toolbar.getHeight()/2);
        bar.animate()
                .translationY(toolbar.getHeight())
                .alpha(1f)
                .setDuration(220)
                .start();
    }

    private void hideToolbar(View bar) {
        if (bar.get